package com.zcr.b_leetcode.dynamicplan.segmentation;

/**
 * 343. 整数拆分
 * 给定一个正整数 n，将其拆分为至少两个正整数的和，并使这些整数的乘积最大化。 返回你可以获得的最大乘积。
 *
 * 示例 1:
 * 输入: 2
 * 输出: 1
 * 解释: 2 = 1 + 1, 1 × 1 = 1。
 *
 * 示例 2:
 * 输入: 10
 * 输出: 36
 * 解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36。
 * 说明: 你可以假设 n 不小于 2 且不大于 58。
 */
public class IntegerBreak {

    /**
     * 状态数组dp[i]表示：数字 i 拆分为至少两个正整数之和的最大乘积。为了方便计算，dp 的长度是 n + 1，值初始化为 1。
     *
     * n=10
     * dp[1]=1
     * dp[2]=1         i=2  j=1       1*dp[1]=1     1*(2-1)=1
     * dp[3]=2           i=3   j=1,2     1*dp[2]=1    1*(3-1)=2          2*dp[2]=2   2*(3-2)=2
     * dp[4]           i=4   j=1,2,3
     * dp[5]
     * dp[6]
     * dp[7]
     * dp[8]
     * dp[9]
     * dp[10]          i=10 j=1,2,3,4,5,6,7,8,9
     *
     * 显然dp[2]等于 1
     *
     * 外层循环从 2 开始遍历，一直到 n 停止。
     * 内层循环 j 从 1 开始遍历，一直到 i 之前停止，它代表着数字 i 可以拆分成 j + (i - j)。
     * 但 j * (i - j)不一定是最大乘积，因为i-j不一定大于dp[i - j]（数字i-j拆分成整数之和的最大乘积），
     * 这里要选择最大的值作为 dp[i] 的结果。
     *
     * 空间复杂度是 O(N)O(N)，时间复杂度是 O(N^2)O(N^2)
     */
    public int integerBreak(int n) {
        int[] dp = new int[n + 1];
        dp[1] = 1;
        for (int i = 2; i <= n; i++) {
            for (int j = 1; j <= i - 1; j++) {//对很多个j一次检查，所以每次要与dp[i]比较
                dp[i] = Math.max(dp[i], Math.max(j * dp[i - j], j * (i - j)));
            }
        }
        return dp[n];
    }
}
