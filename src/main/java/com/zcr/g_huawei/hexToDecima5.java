package com.zcr.g_huawei;

import java.util.Scanner;


/**
 * 进制转换
 * 题目描述
 * 写出一个程序，接受一个十六进制的数，输出该数值的十进制表示。（多组同时输入 ）
 *
 * 输入描述:
 * 输入一个十六进制的数值字符串。
 *
 * 输出描述:
 * 输出该数值的十进制字符串。
 *
 * 示例1
 * 输入
 * 复制
 * 0xA
 * 输出
 * 复制
 * 10
 *
 *
 *
 * 知识点：
 * 1.16进制：16进制即逢16进1，每一位上可以是从小到大为0、1、2、3、4、5、6、7、8、9、A、B、C、D、E、F共16个大小不同的数。
 * 16进制转换即16进制与其他不同进制之间的换算转换，常见如2进制、8进制、10进制等进制。
 * 16进制转换为10进制：
 * 16进制数的第0位的权值为16的0次方，第1位的权值为16的1次方，第2位的权值为16的2次方……
 * 所以，在第N（N从0开始）位上，如果是是数 X （X 大于等于0，并且X小于等于 15，即：F）表示的大小为 X * 16的N次方。
 * 例：2AF5换算成10进制:
 * 用竖式计算：
 * 第0位： 5 * 16^0 = 5
 * 第1位： F * 16^1 = 240
 * 第2位： A * 16^2= 2560
 * 第3位： 2 * 16^3 = 8192
 * -------------------------------------
 * 10997
 * 直接计算就是：
 * 5 * 16^0 + F * 16^1 + A * 16^2 + 2 * 16^3 = 10997
 *
 * 16进制到二进制
 * 由于在二进制的表示方法中，每四位所表示的数的最大值对应16进制的15，即16进制每一位上最大值，所以，我们可以得出简便的转换方法，将16进制上每一位分别对应二进制上四位进行转换，即得所求：
 * 例：2AF5换算成2进制:
 * 第0位： （5）16 = （0101) 2
 * 第1位： （F）16 = (1111) 2
 * 第2位： (A) 16 = (1010) 2
 * 第3位： (2) 16 = (0010) 2 -------------------------------------
 * 得：(2AF5)16=(0010.1010.1111.0101)2
 *
 *
 *  2转16
 * 16进制就有16个数，0~15，用二进制表示15的方法就是1111，从而可以推断出，16进制用2进制可以表现成0000~1111，顾名思义，也就是每四个为一位。举例：
 * 00111101可以这样分：
 * 0011|1101（最高位不够可用零代替），对照着二进制的表格，1024 512 256 128 64 32 16 8 4 2 1 （一般例举这么多就够了，如果有小数的话就继续往右边列举，如0.5 0.25 0.125 0.0625……）
 * 1024 512 256 128 64 32 16 8 4 2 1
 * 0 0 1 1| 1 1 0 1
 * 左半边=2+1=3 右半边=8+4+1=13=D
 * 结果，00111101就可以换算成16进制的3D。
 *
 * 2.字符也代表响应的ASII码
 * 字符-'a'往往是一个数字
 *
 */
public class hexToDecima5 {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        while (scanner.hasNext()) {
            String str = scanner.next();
            System.out.println(hexToDecima(str.substring(2)));
        }
    }

    public static int hexToDecima(String str) {
        int result = 0;
        int count = 0;
        int temp = 0;
        char ch;

        while (count < str.length()) {
            ch = str.charAt(str.length() - 1 - count);
            if (ch >= '0' && ch <= '9') {
                temp = ch - '0';
            } else if (ch >= 'A' && ch <= 'Z') {
                temp = ch - 'A' + 10;
            } else if (ch >= 'a' && ch < 'z') {
                temp = ch = 'a' + 10;
            } else {
                break;
            }
            result += temp * Math.pow(16, count);
            count++;
        }
        return result;
    }
}
